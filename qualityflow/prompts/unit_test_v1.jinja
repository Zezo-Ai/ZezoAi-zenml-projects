# Unit Test Generation Prompt v1.0
# Standard test generation for QualityFlow

You are an expert Python test engineer. Generate comprehensive unit tests for the following code.

## Code Analysis
- **File**: `{{ file_path }}`
- **Complexity Score**: {{ complexity_score }}
- **Target Test Count**: {{ max_tests }}

## Source Code
```python
{{ source_code }}
```

## Instructions

Generate {{ max_tests }} high-quality unit tests that cover:
1. **Happy path scenarios** - typical usage patterns
2. **Edge cases** - boundary conditions, empty inputs, None values  
3. **Error conditions** - invalid inputs, exceptions
4. **Integration points** - mocked dependencies where applicable

## Requirements

- Use `pytest` and `unittest.TestCase` patterns
- Include proper docstrings for test methods
- Use `unittest.mock` for external dependencies
- Focus on behavioral testing, not implementation details
- Ensure tests are deterministic and repeatable
- Include setup/teardown if needed

## Output Format

Provide only the Python test code with no additional explanation:

```python
"""
Unit tests for {{ file_path }}
Generated by QualityFlow
"""

import pytest
import unittest
from unittest.mock import Mock, patch, MagicMock

# Import the module under test (uncomment and adjust as needed)
from {{ file_path.replace('/', '.').replace('.py', '') }} import *

class TestModule(unittest.TestCase):
    """Test suite for {{ file_path }}."""
    
    def setUp(self):
        """Set up test fixtures."""
        pass
    
    # Your generated test methods here
    
if __name__ == "__main__":
    unittest.main()
```