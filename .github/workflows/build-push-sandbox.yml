name: Build and Push Project Sandbox Images

on:
  push:
    branches:
      - main
    paths-ignore:
      - "_assets/**"
      - ".github/**"
      - ".gitignore"
      - ".gitmodules"
      - ".typos.toml"
      - "CODE-OF-CONDUCT.md"
      - "CONTRIBUTING.md"
      - "scripts/**"
      - "LICENSE"
      - "pyproject.toml"
      - "README.md"

  workflow_dispatch:
    inputs:
      project:
        description: "Project to build (leave empty to detect from changed files)"
        required: false
        default: ""

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Detect changed projects
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.project }}" ]; then
              PROJECTS="[\"${{ github.event.inputs.project }}\"]"
            else
              # Auto-detect changed files (same logic as push events)
              CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
              CHANGED_DIRS=$(echo "$CHANGED_FILES" | grep -o "^[^/]*" | sort -u | grep -v "^$")
              ALL_PROJECT_DIRS=$(find . -maxdepth 1 -type d -not -path "*/\.*" -not -path "." | sed 's|^\./||' | grep -v "^_")
              PROJECTS="["
              COMMA=""
              for DIR in $CHANGED_DIRS; do
                if echo "$ALL_PROJECT_DIRS" | grep -q "^$DIR$"; then
                  PROJECTS="${PROJECTS}${COMMA}\"${DIR}\""
                  COMMA=","
                fi
              done
              PROJECTS="${PROJECTS}]"
            fi
          else
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            CHANGED_DIRS=$(echo "$CHANGED_FILES" | grep -o "^[^/]*" | sort -u | grep -v "^$")
            ALL_PROJECT_DIRS=$(find . -maxdepth 1 -type d -not -path "*/\.*" -not -path "." | sed 's|^\./||' | grep -v "^_")
            PROJECTS="["
            COMMA=""
            for DIR in $CHANGED_DIRS; do
              if echo "$ALL_PROJECT_DIRS" | grep -q "^$DIR$"; then
                PROJECTS="${PROJECTS}${COMMA}\"${DIR}\""
                COMMA=","
              fi
            done
            PROJECTS="${PROJECTS}]"
          fi
          echo "matrix=$PROJECTS" >> $GITHUB_OUTPUT
          echo "Projects to build: $PROJECTS"

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set image tag timestamp
        id: timestamp
        run: |
          echo "timestamp=$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Check for Dockerfile.codespace
        id: check-dockerfile
        run: |
          if [ -f "${{ matrix.project }}/Dockerfile.codespace" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'false'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Generate Dockerfile.codespace if needed
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'false'
        id: generate-dockerfile
        run: |
          python generate_sandbox_dockerfile.py "${{ matrix.project }}"
          echo "Generated Dockerfile.codespace for ${{ matrix.project }}"

      - name: Create Pull Request for new Dockerfile
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto-generate Dockerfile.codespace for ${{ matrix.project }}"
          title: "Auto-generate Dockerfile.codespace for ${{ matrix.project }}"
          body: |
            This PR adds a generated Dockerfile.codespace for the ${{ matrix.project }} project.

            Please review the changes and merge if they look good.

            Once merged, the Docker image will be built and pushed automatically.
          branch: "auto-dockerfile-${{ matrix.project }}"
          base: main
          labels: |
            automated-pr
            dockerfile
            sandbox

      # Only build and push if Dockerfile already exists
      - name: Set up Docker Buildx
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.project }}/Dockerfile.codespace
          push: true
          tags: |
            zenmldocker/projects-${{ matrix.project }}:${{ steps.timestamp.outputs.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
